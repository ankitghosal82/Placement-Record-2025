# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qhe2VbxoORhlLpQYrxk7jp4UDwUcED8v
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files
uploaded=files.upload();

df=pd.read_excel('Placement-Record-2025 2.xlsx')
df.head(20)

df.fillna(0, inplace=True)
raw = pd.read_excel('Placement-Record-2025 2.xlsx', header=1)

# Drop the first 2 metadata rows
raw = raw.iloc[1:].reset_index(drop=True)

# Set clean column names from row 1

raw.fillna(0, inplace=True)
raw.head(20)

raw['Annual CTC Offered'] = pd.to_numeric(raw['Annual CTC Offered'], errors='coerce')
plt.figure(figsize=(10, 6))
sns.histplot(raw['Annual CTC Offered'], bins=20, color='skyblue')
plt.title('Distribution of All CTCs Offered')
plt.xlabel('CTC (in LPA)')
plt.ylabel('Number of Offers')
plt.grid(True)
plt.show()

raw['EE'] = pd.to_numeric(raw['EE'], errors='coerce')

# Step 4: Skip first 2 data rows

# Step 5: Filter where EE offers > 0
df_ee = raw[raw['EE'] > 0].copy()
df_ee['Annual CTC Offered'] = pd.to_numeric(df_ee['Annual CTC Offered'], errors='coerce')
# Step 6: Plot CTC vs EE offers
plt.figure(figsize=(6, 4))
sns.histplot(x=df_ee['Annual CTC Offered'], color='orange', bins=20) # Changed to only plot CTC distribution
plt.title('Distribution of CTCs for EE Offers > 0')
plt.xlabel('CTC (in LPA)')
plt.ylabel('Number of Offers')
plt.xticks(rotation=0)
plt.grid(True)
plt.show()

# Sort data
top_n = 40
top_companies = raw.sort_values('Annual CTC Offered', ascending=False).head(top_n)

# Create plot
plt.figure(figsize=(10, 8))

# Create more space by giving bars fixed positions with spacing
y_pos = list(range(0, top_n * 6, 6))  # spacing of 2 units between each bar
plt.barh(y_pos, top_companies['Annual CTC Offered'], color='orange')

# Add custom y-ticks
plt.yticks(y_pos, top_companies['Company  Visited'])

# Titles and labels
plt.xlabel("CTC Offered (in LPA)")
plt.title(f"Top {top_n} Companies by CTC")
plt.gca().invert_yaxis()  # Highest CTC at the top
plt.grid(True, axis='x')
plt.tight_layout()
plt.show()

raw.columns = raw.columns.str.strip()

# Select only required columns: company + department-wise recruitment
departments = ['CST', 'ETC', 'EE', 'IT', 'ME', 'CE', 'MET', 'MIN']
heatmap_df = raw[['Company  Visited'] + departments].copy()

# Set Company Visited as index
heatmap_df.set_index('Company  Visited', inplace=True)

# Optional: Replace any text (like 'O') with 1, and NaN with 0
heatmap_df = heatmap_df.notna().astype(int)

# Plot heatmap
plt.figure(figsize=(14, 10))
sns.heatmap(heatmap_df, cmap='Greens', linewidths=0.5, linecolor='gray', cbar=False, annot=True, fmt='d')

plt.title("Company Recruitment by Department")
plt.xlabel("Department")
plt.ylabel("Company")
plt.tight_layout()
plt.show()

# Add total selections column and sort descending
heatmap_df['Total'] = heatmap_df.sum(axis=1)
top_companies = heatmap_df.sort_values('Total', ascending=False).head(40).drop(columns='Total')

plt.figure(figsize=(14, 8))
top_companies.plot(kind='bar', stacked=True, figsize=(14, 8), colormap='tab20')

plt.title("Top 40 Companies by Department-wise Student Selections")
plt.xlabel("Company")
plt.ylabel("Number of Students Selected")
plt.xticks(rotation=90)

plt.legend(title="Department", bbox_to_anchor=(1.05, 1), loc='upper left')

plt.tight_layout()
plt.subplots_adjust(bottom=0.3)
plt.show()

